/**
 * Mock OpenAI Client for ResQ Connect Demo
 * 
 * Provides mock implementations of OpenAI functionality
 * for the frontend prototype demonstration.
 */

import { AIResponse, SafetyContext } from './openai-client';
import { MOCK_AI_RESPONSES } from '@/src/data/mock-data';

export class MockOpenAIClient {
  private isTestMode: boolean = true;

  constructor() {
    // Always in test mode for demo
  }

  /**
   * Generate mock safety advice
   */
  async generateSafetyAdvice(query: string, context?: SafetyContext): Promise<AIResponse> {
    console.log('Mock OpenAI generateSafetyAdvice:', { query, context });
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
    
    const lowerQuery = query.toLowerCase();
    
    if (lowerQuery.includes('unsafe') || lowerQuery.includes('walking alone')) {
      return {
        text: `**Safety Tips for Traveling Alone in North-Eastern India (Demo Response):**

üö∂‚Äç‚ôÄÔ∏è **Stay Alert & Aware**
- Keep your head up and avoid distractions
- Trust your instincts - if something feels wrong, it probably is
- Be extra cautious in hilly terrain and during weather changes

üåü **Choose Safe Routes**
- Use well-lit, populated areas whenever possible
- Avoid shortcuts through isolated mountain paths
- Check weather conditions before traveling

üì± **Stay Connected**
- Share your location with trusted contacts
- Keep your phone charged and easily accessible
- Use ResQ Connect's emergency alert if you feel threatened

üë• **Be Prepared**
- Walk with purpose and confidence
- Avoid displaying expensive items
- If possible, travel with others or in groups

*This is a demo response. In production, this would be generated by AI based on real-time data.*`,
        confidence: 0.8,
        fallback: true,
        timestamp: new Date(),
      };
    }
    
    if (lowerQuery.includes('emergency') || lowerQuery.includes('help')) {
      return {
        text: `**Emergency Response - North-Eastern India (Demo Response):**

üö® **Immediate Actions**
- Call local emergency services: 100 (Police), 101 (Fire), 102 (Ambulance)
- Use ResQ Connect's emergency alert feature
- Move to a safe, public location if possible

üìç **Location Sharing**
- Share your exact location with emergency contacts
- Provide landmarks or nearby buildings for reference
- Stay put unless it's safer to move

üì± **Communication**
- Keep your phone charged and accessible
- Send your location via GPS coordinates
- Use ResQ Connect's community alerts to notify nearby users

*This is a demo response. In production, this would be customized based on your specific situation.*`,
        confidence: 0.9,
        fallback: true,
        timestamp: new Date(),
      };
    }
    
    if (lowerQuery.includes('hazard') || lowerQuery.includes('summary')) {
      return {
        text: MOCK_AI_RESPONSES.hazardSummary,
        confidence: 0.85,
        fallback: true,
        timestamp: new Date(),
      };
    }
    
    if (lowerQuery.includes('route') || lowerQuery.includes('navigation')) {
      return {
        text: `**Safe Route Navigation - North-Eastern India (Demo Response):**

üó∫Ô∏è **Route Planning Tips**
- Check weather conditions before departure
- Use well-maintained highways when possible
- Avoid mountain roads during heavy rain
- Plan alternative routes in advance

‚ö†Ô∏è **Hazard Awareness**
- Watch for landslide warning signs
- Be cautious near rivers and streams
- Monitor local news for road closures
- Check ResQ Connect for real-time alerts

üöó **Driving Safety**
- Reduce speed on wet or slippery roads
- Maintain safe following distance
- Use headlights in poor visibility
- Carry emergency supplies

*This is a demo response. In production, this would provide real-time route analysis.*`,
        confidence: 0.8,
        fallback: true,
        timestamp: new Date(),
      };
    }
    
    // Default response
    return {
      text: `**ResQ Connect AI Assistant (Demo Response)**

Thank you for your question! I'm here to help with travel safety in North-Eastern India.

I can provide guidance on:
- Personal safety tips for hilly terrain
- Emergency response procedures
- Route planning and navigation
- Weather and hazard awareness
- Local emergency contacts

*This is a demo response. In production, I would provide personalized, real-time safety advice based on your location and current conditions.*

How can I assist you with your safety concerns?`,
      confidence: 0.7,
      fallback: true,
      timestamp: new Date(),
    };
  }

  /**
   * Generate mock emergency message
   */
  async generateEmergencyMessage(
    emergencyType: 'medical' | 'safety' | 'weather' | 'transport',
    context: SafetyContext
  ): Promise<AIResponse> {
    console.log('Mock OpenAI generateEmergencyMessage:', { emergencyType, context });
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const emergencyMessages = {
      medical: `üö® MEDICAL EMERGENCY - North-Eastern India (Demo)
Location: ${context?.location?.address || 'Current location'}
Time: ${new Date().toLocaleString()}

Immediate Actions:
1. Call 102 for ambulance
2. Stay with the person
3. Keep them comfortable and still
4. Share location with emergency contacts

ResQ Connect Emergency Alert Activated
*This is a demo response.*`,
      
      safety: `üö® SAFETY EMERGENCY - North-Eastern India (Demo)
Location: ${context?.location?.address || 'Current location'}
Time: ${new Date().toLocaleString()}

Immediate Actions:
1. Call 100 for police
2. Move to a safe, public location
3. Stay alert and aware
4. Share location with trusted contacts

ResQ Connect Emergency Alert Activated
*This is a demo response.*`,
      
      weather: `üåßÔ∏è WEATHER EMERGENCY - North-Eastern India (Demo)
Location: ${context?.location?.address || 'Current location'}
Time: ${new Date().toLocaleString()}

Immediate Actions:
1. Seek immediate shelter
2. Avoid open areas and high ground
3. Stay away from water bodies
4. Monitor weather updates

ResQ Connect Emergency Alert Activated
*This is a demo response.*`,
      
      transport: `üöó TRANSPORT EMERGENCY - North-Eastern India (Demo)
Location: ${context?.location?.address || 'Current location'}
Time: ${new Date().toLocaleString()}

Immediate Actions:
1. Move to safety if possible
2. Call 100 for police assistance
3. Document the incident
4. Share location with emergency contacts

ResQ Connect Emergency Alert Activated
*This is a demo response.*`
    };

    return {
      text: emergencyMessages[emergencyType],
      confidence: 0.9,
      fallback: true,
      timestamp: new Date(),
    };
  }

  /**
   * Assess mock route safety
   */
  async assessRouteSafety(
    route: {
      start: { lat: number; lon: number };
      end: { lat: number; lon: number };
      waypoints?: Array<{ lat: number; lon: number }>;
    },
    context?: SafetyContext
  ): Promise<AIResponse> {
    console.log('Mock OpenAI assessRouteSafety:', { route, context });
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    return {
      text: `**Route Safety Assessment - North-Eastern India (Demo)**

üìç **Route Analysis:**
- Start: ${route.start.lat.toFixed(4)}, ${route.start.lon.toFixed(4)}
- End: ${route.end.lat.toFixed(4)}, ${route.end.lon.toFixed(4)}
- Waypoints: ${route.waypoints?.length || 0}

‚ö†Ô∏è **Safety Considerations:**
- Hilly terrain may have steep inclines and sharp turns
- Weather conditions can change rapidly
- Some areas may have limited mobile connectivity
- Wildlife may be present in forested areas

‚úÖ **Recommendations:**
- Travel during daylight hours when possible
- Inform someone of your planned route and expected arrival time
- Carry emergency supplies and first aid kit
- Check weather conditions before departure
- Use ResQ Connect's location sharing feature

üö® **Risk Level: MEDIUM**
- Monitor weather updates
- Stay alert for road hazards
- Keep emergency contacts informed

*This is a demo assessment. In production, this would analyze real-time data and provide personalized recommendations.*`,
      confidence: 0.8,
      fallback: true,
      timestamp: new Date(),
    };
  }
}

// Export singleton instance
export const mockOpenAIClient = new MockOpenAIClient();

// Export for testing
export const createMockTestClient = () => new MockOpenAIClient();
